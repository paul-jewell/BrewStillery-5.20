use light::colour::s0Data::s0Data;
use light::colour::s1Data::s1Data;
use light::colour::s2Data::s2Data;

pub fn computedIlluminantData() -> [f64; 81] {
    let mut computedIlluminantList: [f64; 81] = [0.0; 81];

    let colourTemp: f64 = 6504.0;
    let xd = (-4607000000.0 / colourTemp.powi(3)) + (2967800.0 / colourTemp.powi(2)) + (99.11 / colourTemp) + 0.244063;
    let yd = -3.0 * xd.powi(2) + 2.87 * xd - 0.275;
    let M1 = (-1.3515 - 1.7703 * xd + 5.9114 * yd) / (0.0241 + 0.2562 * xd - 0.7341 * yd);
    let M2 = (0.03 - 31.4424 * xd + 30.0717 * yd) / (0.0241+0.2562*xd-0.7341 * yd);
    let s0Data = s0Data();
    let s1Data = s1Data();
    let s2Data = s2Data();

    // index is wavelengths of light, stepped by 5, from 380 to 780
    computedIlluminantList[0] = colourTemp * s0Data[0] + M1 * s1Data[0] + M2 * s2Data[0];
    computedIlluminantList[1] = colourTemp * s0Data[1] + M1 * s1Data[1] + M2 * s2Data[1];
    computedIlluminantList[2] = colourTemp * s0Data[2] + M1 * s1Data[2] + M2 * s2Data[2];
    computedIlluminantList[3] = colourTemp * s0Data[3] + M1 * s1Data[3] + M2 * s2Data[3];
    computedIlluminantList[4] = colourTemp * s0Data[4] + M1 * s1Data[4] + M2 * s2Data[4];
    computedIlluminantList[5] = colourTemp * s0Data[5] + M1 * s1Data[5] + M2 * s2Data[5];
    computedIlluminantList[6] = colourTemp * s0Data[6] + M1 * s1Data[6] + M2 * s2Data[6];
    computedIlluminantList[7] = colourTemp * s0Data[7] + M1 * s1Data[7] + M2 * s2Data[7];
    computedIlluminantList[8] = colourTemp * s0Data[8] + M1 * s1Data[8] + M2 * s2Data[8];
    computedIlluminantList[9] = colourTemp * s0Data[9] + M1 * s1Data[9] + M2 * s2Data[9];
    computedIlluminantList[10] = colourTemp * s0Data[10] + M1 * s1Data[10] + M2 * s2Data[10];
    computedIlluminantList[11] = colourTemp * s0Data[11] + M1 * s1Data[11] + M2 * s2Data[11];
    computedIlluminantList[12] = colourTemp * s0Data[12] + M1 * s1Data[12] + M2 * s2Data[12];
    computedIlluminantList[13] = colourTemp * s0Data[13] + M1 * s1Data[13] + M2 * s2Data[13];
    computedIlluminantList[14] = colourTemp * s0Data[14] + M1 * s1Data[14] + M2 * s2Data[14];
    computedIlluminantList[15] = colourTemp * s0Data[15] + M1 * s1Data[15] + M2 * s2Data[15];
    computedIlluminantList[16] = colourTemp * s0Data[16] + M1 * s1Data[16] + M2 * s2Data[16];
    computedIlluminantList[17] = colourTemp * s0Data[17] + M1 * s1Data[17] + M2 * s2Data[17];
    computedIlluminantList[18] = colourTemp * s0Data[18] + M1 * s1Data[18] + M2 * s2Data[18];
    computedIlluminantList[19] = colourTemp * s0Data[19] + M1 * s1Data[19] + M2 * s2Data[19];
    computedIlluminantList[20] = colourTemp * s0Data[20] + M1 * s1Data[20] + M2 * s2Data[20];
    computedIlluminantList[21] = colourTemp * s0Data[21] + M1 * s1Data[21] + M2 * s2Data[21];
    computedIlluminantList[22] = colourTemp * s0Data[22] + M1 * s1Data[22] + M2 * s2Data[22];
    computedIlluminantList[23] = colourTemp * s0Data[23] + M1 * s1Data[23] + M2 * s2Data[23];
    computedIlluminantList[24] = colourTemp * s0Data[24] + M1 * s1Data[24] + M2 * s2Data[24];
    computedIlluminantList[25] = colourTemp * s0Data[25] + M1 * s1Data[25] + M2 * s2Data[25];
    computedIlluminantList[26] = colourTemp * s0Data[26] + M1 * s1Data[26] + M2 * s2Data[26];
    computedIlluminantList[27] = colourTemp * s0Data[27] + M1 * s1Data[27] + M2 * s2Data[27];
    computedIlluminantList[28] = colourTemp * s0Data[28] + M1 * s1Data[28] + M2 * s2Data[28];
    computedIlluminantList[29] = colourTemp * s0Data[29] + M1 * s1Data[29] + M2 * s2Data[29];
    computedIlluminantList[30] = colourTemp * s0Data[30] + M1 * s1Data[30] + M2 * s2Data[30];
    computedIlluminantList[31] = colourTemp * s0Data[31] + M1 * s1Data[31] + M2 * s2Data[31];
    computedIlluminantList[32] = colourTemp * s0Data[32] + M1 * s1Data[32] + M2 * s2Data[32];
    computedIlluminantList[33] = colourTemp * s0Data[33] + M1 * s1Data[33] + M2 * s2Data[33];
    computedIlluminantList[34] = colourTemp * s0Data[34] + M1 * s1Data[34] + M2 * s2Data[34];
    computedIlluminantList[35] = colourTemp * s0Data[35] + M1 * s1Data[35] + M2 * s2Data[35];
    computedIlluminantList[36] = colourTemp * s0Data[36] + M1 * s1Data[36] + M2 * s2Data[36];
    computedIlluminantList[37] = colourTemp * s0Data[37] + M1 * s1Data[37] + M2 * s2Data[37];
    computedIlluminantList[38] = colourTemp * s0Data[38] + M1 * s1Data[38] + M2 * s2Data[38];
    computedIlluminantList[39] = colourTemp * s0Data[39] + M1 * s1Data[39] + M2 * s2Data[39];
    computedIlluminantList[40] = colourTemp * s0Data[40] + M1 * s1Data[40] + M2 * s2Data[40];
    computedIlluminantList[41] = colourTemp * s0Data[41] + M1 * s1Data[41] + M2 * s2Data[41];
    computedIlluminantList[42] = colourTemp * s0Data[42] + M1 * s1Data[42] + M2 * s2Data[42];
    computedIlluminantList[43] = colourTemp * s0Data[43] + M1 * s1Data[43] + M2 * s2Data[43];
    computedIlluminantList[44] = colourTemp * s0Data[44] + M1 * s1Data[44] + M2 * s2Data[44];
    computedIlluminantList[45] = colourTemp * s0Data[45] + M1 * s1Data[45] + M2 * s2Data[45];
    computedIlluminantList[46] = colourTemp * s0Data[46] + M1 * s1Data[46] + M2 * s2Data[46];
    computedIlluminantList[47] = colourTemp * s0Data[47] + M1 * s1Data[47] + M2 * s2Data[47];
    computedIlluminantList[48] = colourTemp * s0Data[48] + M1 * s1Data[48] + M2 * s2Data[48];
    computedIlluminantList[49] = colourTemp * s0Data[49] + M1 * s1Data[49] + M2 * s2Data[49];
    computedIlluminantList[50] = colourTemp * s0Data[50] + M1 * s1Data[50] + M2 * s2Data[50];
    computedIlluminantList[51] = colourTemp * s0Data[51] + M1 * s1Data[51] + M2 * s2Data[51];
    computedIlluminantList[52] = colourTemp * s0Data[52] + M1 * s1Data[52] + M2 * s2Data[52];
    computedIlluminantList[53] = colourTemp * s0Data[53] + M1 * s1Data[53] + M2 * s2Data[53];
    computedIlluminantList[54] = colourTemp * s0Data[54] + M1 * s1Data[54] + M2 * s2Data[54];
    computedIlluminantList[55] = colourTemp * s0Data[55] + M1 * s1Data[55] + M2 * s2Data[55];
    computedIlluminantList[56] = colourTemp * s0Data[56] + M1 * s1Data[56] + M2 * s2Data[56];
    computedIlluminantList[57] = colourTemp * s0Data[57] + M1 * s1Data[57] + M2 * s2Data[57];
    computedIlluminantList[58] = colourTemp * s0Data[58] + M1 * s1Data[58] + M2 * s2Data[58];
    computedIlluminantList[59] = colourTemp * s0Data[59] + M1 * s1Data[59] + M2 * s2Data[59];
    computedIlluminantList[60] = colourTemp * s0Data[60] + M1 * s1Data[60] + M2 * s2Data[60];
    computedIlluminantList[61] = colourTemp * s0Data[61] + M1 * s1Data[61] + M2 * s2Data[61];
    computedIlluminantList[62] = colourTemp * s0Data[62] + M1 * s1Data[62] + M2 * s2Data[62];
    computedIlluminantList[63] = colourTemp * s0Data[63] + M1 * s1Data[63] + M2 * s2Data[63];
    computedIlluminantList[64] = colourTemp * s0Data[64] + M1 * s1Data[64] + M2 * s2Data[64];
    computedIlluminantList[65] = colourTemp * s0Data[65] + M1 * s1Data[65] + M2 * s2Data[65];
    computedIlluminantList[66] = colourTemp * s0Data[66] + M1 * s1Data[66] + M2 * s2Data[66];
    computedIlluminantList[67] = colourTemp * s0Data[67] + M1 * s1Data[67] + M2 * s2Data[67];
    computedIlluminantList[68] = colourTemp * s0Data[68] + M1 * s1Data[68] + M2 * s2Data[68];
    computedIlluminantList[69] = colourTemp * s0Data[69] + M1 * s1Data[69] + M2 * s2Data[69];
    computedIlluminantList[70] = colourTemp * s0Data[70] + M1 * s1Data[70] + M2 * s2Data[70];
    computedIlluminantList[71] = colourTemp * s0Data[71] + M1 * s1Data[71] + M2 * s2Data[71];
    computedIlluminantList[72] = colourTemp * s0Data[72] + M1 * s1Data[72] + M2 * s2Data[72];
    computedIlluminantList[73] = colourTemp * s0Data[73] + M1 * s1Data[73] + M2 * s2Data[73];
    computedIlluminantList[74] = colourTemp * s0Data[74] + M1 * s1Data[74] + M2 * s2Data[74];
    computedIlluminantList[75] = colourTemp * s0Data[75] + M1 * s1Data[75] + M2 * s2Data[75];
    computedIlluminantList[76] = colourTemp * s0Data[76] + M1 * s1Data[76] + M2 * s2Data[76];
    computedIlluminantList[77] = colourTemp * s0Data[77] + M1 * s1Data[77] + M2 * s2Data[77];
    computedIlluminantList[78] = colourTemp * s0Data[78] + M1 * s1Data[78] + M2 * s2Data[78];
    computedIlluminantList[79] = colourTemp * s0Data[79] + M1 * s1Data[79] + M2 * s2Data[79];
    computedIlluminantList[80] = colourTemp * s0Data[80] + M1 * s1Data[80] + M2 * s2Data[80];

    computedIlluminantList
}